// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/Gopher0727/RTMP/config"
	"github.com/Gopher0727/RTMP/internal/api"
	"github.com/Gopher0727/RTMP/internal/repository"
	"github.com/Gopher0727/RTMP/internal/service"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitApp 初始化应用依赖
func InitApp(db *gorm.DB) (*App, error) {
	iUserRepository := repository.NewUserRepository(db)
	iMessageRepository := repository.NewMessageRepository(db)
	iRoomRepository := repository.NewRoomRepository(db)

	iUserService := service.NewUserService(iUserRepository)
	iMessageService := service.NewMessageService(iMessageRepository, iRoomRepository)
	iRoomService := service.NewRoomService(iRoomRepository)
	iHubService := service.NewHubService(iUserRepository, iMessageRepository, iRoomRepository, db)

	authHandler := api.NewAuthHandler(iUserService)
	userHandler := api.NewUserHandler(iUserService)
	messageHandler := api.NewMessageHandler(iMessageService)
	roomHandler := api.NewRoomHandler(iRoomService)
	hubHandler := api.NewHubHandler(iHubService, iUserService, iMessageService, iRoomService)

	config := wireConfigValue
	app := NewApp(iUserService, iMessageService, iRoomService, iHubService, authHandler, userHandler, messageHandler, roomHandler, hubHandler, config)
	return app, nil
}

var (
	wireConfigValue = &config.Config{}
)

// wire.go:

// App 应用结构体
type App struct {
	// 服务层
	UserService    service.IUserService
	MessageService service.IMessageService
	RoomService    service.IRoomService
	HubService     service.IHubService

	// API处理器层
	AuthHandler    *api.AuthHandler
	UserHandler    *api.UserHandler
	MessageHandler *api.MessageHandler
	RoomHandler    *api.RoomHandler
	HubHandler     *api.HubHandler // 添加HubHandler

	// 配置
	Config *config.Config
}

// NewApp 创建应用
func NewApp(
	userService service.IUserService,
	messageService service.IMessageService,
	roomService service.IRoomService,
	hubService service.IHubService,
	authHandler *api.AuthHandler,
	userHandler *api.UserHandler,
	messageHandler *api.MessageHandler,
	roomHandler *api.RoomHandler,
	hubHandler *api.HubHandler,
	config *config.Config,
) *App {
	return &App{
		UserService:    userService,
		MessageService: messageService,
		RoomService:    roomService,
		HubService:     hubService,
		AuthHandler:    authHandler,
		UserHandler:    userHandler,
		MessageHandler: messageHandler,
		RoomHandler:    roomHandler,
		HubHandler:     hubHandler,
		Config:         config,
	}
}
